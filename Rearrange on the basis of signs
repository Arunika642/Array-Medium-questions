Brute force
take all positives in one array
all negatives in other
RUn s loop till n/2 and at even index put arr[2*i] = pos[i] and at arr[2*i+1] = neg[i];
TC= O(N)+O(N) and SC=O(N)

class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int> positives;
        vector<int> negatives;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]>0)
            {
                positives.push_back(nums[i]);
            }
            else
            {
                negatives.push_back(nums[i]);
            }
        }
        for(int i=0;i<nums.size()/2;i++)
        {
            nums[2*i]= positives[i];
            nums[2*i+1]=negatives[i];
        }
        return nums;
    }
};





Optimal SOlution--
/*This solution takes only one pass O(N) if the number is positive and keeping it at 0 and doing +2
and if negative then keeping it at 1 and doing a +2
The SC however will be O(N) only to store the answer. It can be only optimised to a certain level.*/


class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        int pos=0,neg=1;
        vector<int> ans(nums.size(),0);
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]>0)
            {
                ans[pos]=nums[i];
                pos+=2;
            }
            else
            {
                ans[neg]=nums[i];
                neg+=2;
            }
        }
        return ans;
    }
};
