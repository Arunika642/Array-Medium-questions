Brute method:
take a counter and check if the count is greater that n/2 or not. Takes a TC of O(N^2) because of 2 loops and SC- O(1)



Better method:
Using a hashmap:
map<int,int> mpp;
for(int i=0;i<n;i++)
{
mpp[arr[i]]++;
}
iterate in map and check the key whose value is greater than n/2
for(auto it:mpp)
{
if(it.second>n/2) return it.first
}
This takes a TC of O(NlogN) and a SC of O(N) as  we are using a map data structure which take logN to insert.




Optimal solution:
/*To solve this question used an algo named as Moore's voting algorithm
if count = 0 then set count as 1 and value of el as nums[i]
This algo helps in returning an element that is likely to have the highest number of count in the array.
if the nums[i]==el the do a count++
else do a count-- if at any point the count is 0 then it follows first if condition of setting count as 0 
and el as nums[i].
after that just take a variable cnt=0 and count how many times that particular element that we received from the 
above algo
Takes a TC of O(2N) and SC- O(1)*/


class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0;
        int el;
        for(int i=0;i<nums.size();i++)
        {
            if(count == 0)
            {
                count = 1;
                el = nums[i];
            }
            else if(nums[i] == el)
            {
                count++;
            }
            else
            {
                count--;
            }
        }
        int count1=0;
        for(int i=0; i<nums.size();i++)
        {
            if(nums[i]==el)
            {
                count1++;
            }
        }
        if(count1>nums.size()/2)
        {
            return el;
        }
        return -1;
    }
};
