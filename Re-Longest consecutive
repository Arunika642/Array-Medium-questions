
Brute:
//THis approach takes O(n^2) TC   
    bool ls(vector<int>a,int x)
    {
        for(int i=0;i<a.size();i++)
        {
            if(a[i]==x)
            {
                return true;
            }
        }
        return false;
    }
int longestSuccessiveElements(vector<int>&a) {
    // Write your code here.
    int longest=1,x,count;
    for(int i=0;i<a.size();i++)
    {
        x=a[i];
        count=1;
        while(ls(a,x+1)==true)
        {
            x=x+1;
            count=count+1;
        }
        longest = max(longest,count);
    }
    return longest;
}



Better approach:
 //THis approach takes O(n^2) TC   
    bool ls(vector<int>a,int x)
    {
        for(int i=0;i<a.size();i++)
        {
            if(a[i]==x)
            {
                return true;
            }
        }
        return false;
    }
int longestSuccessiveElements(vector<int>&a) {
    // Write your code here.
    int longest=1,x,count;
    for(int i=0;i<a.size();i++)
    {
        x=a[i];
        count=1;
        while(ls(a,x+1)==true)
        {
            x=x+1;
            count=count+1;
        }
        longest = max(longest,count);
    }
    return longest;
}







Optimal approach:
/*Store all elements in a set
An unordered set takes O(1) operations to search for an element
Then find the first element of the sequence by checking if x-1 exists or not
If exists then it will not be the starting point else it will be the starting point.
TC- O(N)+O(2N) ==>O(3N)
SC- O(N)*/

int longestSuccessiveElements(vector<int>&a) {
    // Write your code here.
    int longest=1,count=0;
    set<int>st;
    for(int i=0; i<a.size();i++)
    {
        st.insert(a[i]);
    }
    for(auto it:st)
    {
        if(st.find(it-1)==st.end())   //if(previous element does not exists)
        {
            int x = it;
            count=1;
            while (st.find(x + 1) !=
                   st.end()) // if x+1 exists then increase the counter by 1
            {
              x = x + 1; // gone to the next element
              count = count + 1;
            }
        }
        longest = max(longest, count);
    }
    return longest;
}
