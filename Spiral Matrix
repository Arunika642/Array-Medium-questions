/*TC-O(n*m), Auxiliary space complexity: O(1)
Overall space complexity (due to the output): O(n * m)*/

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        int n=matrix.size(); //row
        int m=matrix[0].size(); //col
        int left=0,right= m-1,bottom=n-1,top=0;

        while(left<=right && top<=bottom)
        {
            for(int i=left;i<=right;i++)
            {
                ans.push_back(matrix[top][i]);
            }
            top++;
            for(int i=top;i<=bottom;i++)
            {
                ans.push_back(matrix[i][right]);
            }
            right--;
            if(top<=bottom)
            {
                for(int i=right;i>=left;i--)
                {
                    ans.push_back(matrix[bottom][i]);
                }
                bottom--;
                if(left<=right)
                {
                    for(int i=bottom;i>=top;i--)
                    {
                        ans.push_back(matrix[i][left]);
                    }
                    left++;
                }
            }
        }
        return ans;
    }
};
